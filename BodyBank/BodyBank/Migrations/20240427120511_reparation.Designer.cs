// <auto-generated />
using System;
using BodyBank.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BodyBank.Migrations
{
    [DbContext(typeof(MVCBodyBankContext))]
    [Migration("20240427120511_reparation")]
    partial class reparation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BodyBank.Model.Commande", b =>
                {
                    b.Property<int>("CommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommandeId"), 1L, 1);

                    b.Property<int?>("AdresseLivraisonAddresseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UtilId")
                        .HasColumnType("int");

                    b.HasKey("CommandeId");

                    b.HasIndex("AdresseLivraisonAddresseId");

                    b.HasIndex("UtilId");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("BodyBank.Model.CommandeOrgane", b =>
                {
                    b.Property<int>("CommandeOrganeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommandeOrganeId"), 1L, 1);

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganneId")
                        .HasColumnType("int");

                    b.HasKey("CommandeOrganeId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("OrganneId");

                    b.ToTable("CommandeOrgane");
                });

            modelBuilder.Entity("BodyBank.Model.Donneur", b =>
                {
                    b.Property<int>("DonneurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonneurId"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Poids")
                        .HasColumnType("float");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Taille")
                        .HasColumnType("float");

                    b.HasKey("DonneurId");

                    b.ToTable("Donneur");
                });

            modelBuilder.Entity("BodyBank.Model.Organne", b =>
                {
                    b.Property<int>("OrganneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganneId"), 1L, 1);

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<int>("DonneurId")
                        .HasColumnType("int");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("OrganneId");

                    b.HasIndex("DonneurId");

                    b.HasIndex("TypeId");

                    b.ToTable("Organne");
                });

            modelBuilder.Entity("BodyBank.Model.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrixBase")
                        .HasColumnType("float");

                    b.HasKey("TypeId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("BodyBank.Model.Util", b =>
                {
                    b.Property<int>("UtilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilId"), 1L, 1);

                    b.Property<int?>("AdresseUtilAddresseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomUtil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenomUtil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilId");

                    b.HasIndex("AdresseUtilAddresseId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Util");
                });

            modelBuilder.Entity("BodyBank.Models.Addresse", b =>
                {
                    b.Property<int>("AddresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddresseId"), 1L, 1);

                    b.Property<int>("NoCivique")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddresseId");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("BodyBank.Model.Commande", b =>
                {
                    b.HasOne("BodyBank.Models.Addresse", "AdresseLivraison")
                        .WithMany()
                        .HasForeignKey("AdresseLivraisonAddresseId");

                    b.HasOne("BodyBank.Model.Util", "Util")
                        .WithMany()
                        .HasForeignKey("UtilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdresseLivraison");

                    b.Navigation("Util");
                });

            modelBuilder.Entity("BodyBank.Model.CommandeOrgane", b =>
                {
                    b.HasOne("BodyBank.Model.Commande", "Commande")
                        .WithMany()
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BodyBank.Model.Organne", "Organne")
                        .WithMany()
                        .HasForeignKey("OrganneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Organne");
                });

            modelBuilder.Entity("BodyBank.Model.Organne", b =>
                {
                    b.HasOne("BodyBank.Model.Donneur", "Donneur")
                        .WithMany()
                        .HasForeignKey("DonneurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BodyBank.Model.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donneur");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BodyBank.Model.Util", b =>
                {
                    b.HasOne("BodyBank.Models.Addresse", "AdresseUtil")
                        .WithMany()
                        .HasForeignKey("AdresseUtilAddresseId");

                    b.Navigation("AdresseUtil");
                });
#pragma warning restore 612, 618
        }
    }
}
